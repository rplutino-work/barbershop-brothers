// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String?
  password        String
  role            String   @default("BARBER") // ADMIN, BARBER
  commissionRate  Float    @default(50) // Porcentaje que se queda el barbero (ej: 50 = 50%)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  payments  Payment[]
  sessions  Session[]
  schedules BarberSchedule[]
  appointments Appointment[]

  @@map("users")
}

model Service {
  id          String   @id @default(cuid())
  name        String
  price       Float
  duration    Int      @default(30) // in minutes
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  payments    Payment[]
  appointments Appointment[]

  @@map("services")
}

model Client {
  id          String   @id @default(cuid())
  name        String
  phone       String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  payments    Payment[]

  @@map("clients")
}

model Payment {
  id          String   @id @default(cuid())
  barberId    String
  serviceId   String
  clientId    String?
  amount      Float
  method      String   // CASH, CARD, TRANSFER
  status      String   @default("COMPLETED") // PENDING, COMPLETED, CANCELLED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  barber  User    @relation(fields: [barberId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id])
  client  Client? @relation(fields: [clientId], references: [id])

  @@map("payments")
}

model Session {
  id        String   @id @default(cuid())
  sessionToken String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model BarberShop {
  id          String   @id @default(cuid())
  name        String
  logo        String?
  address     String?
  phone       String?
  email       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("barbershops")
}

model BarberSchedule {
  id        String   @id @default(cuid())
  barberId  String
  dayOfWeek Int      // 0 = Domingo, 1 = Lunes, ..., 6 = SÃ¡bado
  startTime String   // "09:00"
  endTime   String   // "18:00"
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  barber User @relation(fields: [barberId], references: [id], onDelete: Cascade)

  @@map("barber_schedules")
}

model Appointment {
  id          String   @id @default(cuid())
  clientName  String
  clientPhone String
  barberId    String
  serviceId   String
  date        DateTime // Fecha y hora de la cita
  status      String   @default("PENDING") // PENDING, CONFIRMED, COMPLETED, CANCELLED
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  barber  User    @relation(fields: [barberId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id])

  @@map("appointments")
}